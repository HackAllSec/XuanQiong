name: SLSA Go releaser
on:
  workflow_dispatch:
  release:
    types: [created]

permissions: read-all

jobs:
  build:
    permissions:
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read   # To read workflow path.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, 386, arm64, arm]
        exclude:
          - goarch: 386
            goos: darwin
          - goarch: arm
            goos: darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'

      - name: Build and Zip
        run: |
          cd backend
          zip_files=""
          for GOOS in ${{ matrix.goos }}; do
            for GOARCH in ${{ matrix.goarch }}; do
              echo "Building for $GOOS/$GOARCH"
              GOOS=$GOOS GOARCH=$GOARCH go build -o xuanqiong-$GOOS-$GOARCH main.go
              if [ "$GOOS" = "windows" ]; then
                zip -r xuanqiong-$GOOS-$GOARCH.zip xuanqiong-$GOOS-$GOARCH.exe config.yaml
              else
                zip -r xuanqiong-$GOOS-$GOARCH.zip xuanqiong-$GOOS-$GOARCH config.yaml
              fi
              zip_files="$zip_files backend/xuanqiong-$GOOS-$GOARCH.zip "
            done
          done
          echo "ZIP_FILES=$zip_files" >> $GITHUB_ENV

      - name: Parse CHANGELOG
        id: parse_changelog
        run: |
          version_line=$(grep -E "^## \[" CHANGELOG.md | head -n 1)
          version=$(echo $version_line | sed -E 's/^## \[([^\]]+)\].*/\1/')
          description=$(echo $version_line | sed -E 's/^## \[.*\] - (.*)/\1/')
          echo "Latest Version: $version"
          echo "Release Notes: $description"
          echo "RELEASE_TAG=$version" >> $GITHUB_ENV
          echo "RELEASE_NOTES=$description" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.ZIP_FILES }}
          tag: ${{ env.RELEASE_TAG }}
          overwrite: true
          file_glob: false
