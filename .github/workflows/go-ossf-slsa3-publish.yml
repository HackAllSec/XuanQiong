name: SLSA Go Releaser

on:
  workflow_dispatch:
  release:
    types: [created]

permissions:
  id-token: write
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, 386, arm64, arm]
        exclude:
          - goos: darwin
            goarch: 386

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go 1.20
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
        check-latest: true
    - name: Build
      run: |
        echo "Building for ${{ matrix.goos }}-${{ matrix.goarch }}"
        cd backend
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build -v -o ./backend/${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ./backend/${{ matrix.goos }}-${{ matrix.goarch }}

  generate_provenance:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Generate SLSA Provenance
      uses: slsa-framework/slsa-github-generator@v1.4.0
      with:
        go-version: '1.20'
        # 确保这一步与你生成和传递哈希值的步骤一致
        base64-subjects: ${{ needs.build.outputs.digests }}
        upload-assets: true

  release:
    needs: [build, generate_provenance]
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./bin/

    - name: Upload Release Assets
      uses: shogo82148/actions-upload-release-artifact@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_dir: ./bin/
