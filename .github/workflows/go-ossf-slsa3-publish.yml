name: Go Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '^1.18' # The Go version to download (if necessary) and use.

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Build
      run: |
        GOOS=windows GOARCH=amd64 go build -o xuanqiong-windows-amd64.exe ./backend
        GOOS=linux GOARCH=amd64 go build -o xuanqiong-linux-amd64 ./backend
        GOOS=darwin GOARCH=amd64 go build -o xuanqiong-darwin-amd64 ./backend
        GOOS=windows GOARCH=386 go build -o xuanqiong-windows-386.exe ./backend
        GOOS=linux GOARCH=386 go build -o xuanqiong-linux-386 ./backend
        GOOS=darwin GOARCH=386 go build -o xuanqiong-darwin-386 ./backend
        GOOS=windows GOARCH=arm64 go build -o xuanqiong-windows-arm64.exe ./backend
        GOOS=linux GOARCH=arm64 go build -o xuanqiong-linux-arm64 ./backend
        GOOS=darwin GOARCH=arm64 go build -o xuanqiong-darwin-arm64 ./backend
        GOOS=windows GOARCH=arm go build -o xuanqiong-windows-arm.exe ./backend
        GOOS=linux GOARCH=arm go build -o xuanqiong-linux-arm ./backend
        GOOS=darwin GOARCH=arm go build -o xuanqiong-darwin-arm ./backend

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./backend/config.yaml
        asset_name: config.yaml
        asset_content_type: application/yaml

    - name: Upload Binaries
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./xuanqiong-windows-amd64.exe
        asset_name: xuanqiong-windows-amd64.exe
        asset_content_type: application/octet-stream

    # Repeat the above step for each binary you want to upload, changing the asset_path and asset_name accordingly.
