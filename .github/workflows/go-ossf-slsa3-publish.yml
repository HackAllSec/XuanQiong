name: SLSA Go releaser
on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions: read-all

jobs:
  build:
    permissions:
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read   # To read workflow path.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, 386, arm64, arm]
        exclude:
          - goos: darwin
            goarch: 386
          - goos: darwin
            goarch: arm
          - goos: windows
            goarch: arm64
          - goos: windows
            goarch: arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Parse CHANGELOG
        id: parse_changelog
        run: |
          version=$(grep -E '## \[([0-9]+\.[0-9]+\.[0-9]+)\] - [0-9]{4}-[0-9]{2}-[0-9]{2}.*' CHANGELOG.md | head -n 1 | sed -E 's/## \[([0-9]+\.[0-9]+\.[0-9]+)\] - [0-9]{4}-[0-9]{2}-[0-9]{2}(.*)/\1 \2/')
          description=$(awk '/## \[/ {if (found) {found=0; print buffer "\n"; buffer=""; next} else {found=1}} {if (found) buffer=buffer"\n"$0} END {if (found) print buffer}' CHANGELOG.md)
          echo "Latest Version: $version"
          echo "Release Notes: $description"
          echo "RELEASE_TAG=$version" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES=${description//$'\n'/\\n}" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest Tag: ${{ latest_tag }}"
          if [[ "$latest_tag" == "${{ steps.parse_changelog.outputs.RELEASE_TAG }}" ]]; then
              echo "Not a release event, ending workflow."
              exit 0
          fi

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'

      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx
          
      - name: Build
        run: |
          for GOOS in ${{ matrix.goos }}; do
            for GOARCH in ${{ matrix.goarch }}; do
              echo "Building for $GOOS/$GOARCH"
              if [ "$GOOS" = "windows" ]; then
                GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build -ldflags="-s -w" -o xuanqiong-$GOOS-$GOARCH.exe main.go
                upx --lzma --best xuanqiong-$GOOS-$GOARCH.exe
                zip -r xuanqiong-$GOOS-$GOARCH.zip xuanqiong-$GOOS-$GOARCH.exe config.yaml frontend/dist/ admin/dist/
              else
                GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build -ldflags="-s -w" -o xuanqiong-$GOOS-$GOARCH main.go
                upx --lzma --best xuanqiong-$GOOS-$GOARCH
                zip -r xuanqiong-$GOOS-$GOARCH.zip xuanqiong-$GOOS-$GOARCH config.yaml frontend/dist/ admin/dist/
              fi
            done
          done

      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: xuanqiong-*.zip
          tag: ${{ steps.parse_changelog.outputs.RELEASE_TAG }}
          body: ${{ steps.parse_changelog.outputs.RELEASE_NOTES }}
          overwrite: true
          file_glob: true
